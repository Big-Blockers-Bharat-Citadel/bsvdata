struct user{
    PubKey public_key;
    int available_balance;
}

contract demo_token{

    @state
    user[2] users;

    public function tranfer(PubKey sender, Sig sender_signature, PubKey receiver, int value, SigHashPreimage txPreimage, int amount, int min_amount){

        // checking signature for authentication
        require(checkSig(sender_signature, sender));

        // checking the transaction between two users
        require((sender == this.users[0].public_key && receiver == this.users[1].public_key)
        || (receiver == this.users[0].public_key && sender == this.users[1].public_key));

        // intitalizing the sender_id and receiver_id
        int sender_id = 0;
        int receiver_id = 1;

        // if the sender is in the 2nd user then interchanging the sender and receiver id
        if(sender == this.users[1].public_key){
            sender_id = 1;
            receiver_id = 0;
        }

        // checking the value of sender is still above the min allowed amount
        require(this.users[sender_id].available_balance - value >= min_amount);

        // reduction of balance from sender and addition of balance to the receiver
        this.users[sender_id].available_balance -= value;
        this.users[receiver_id].available_balance += value;

        require(this.propagateState(txPreimage, amount));
    }

    function propagateState(SigHashPreimage txPreimage, int value) : bool {
        require(Tx.checkPreimage(txPreimage));
        bytes outputScript = this.getStateScript();
        bytes output = Utils.buildOutput(outputScript, value);
        return hash256(output) == SigHash.hashOutputs(txPreimage);
    }
}